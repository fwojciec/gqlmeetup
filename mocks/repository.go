// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/gqlmeetup"
	"sync"
)

var (
	lockRepositoryMockAgentCreate   sync.RWMutex
	lockRepositoryMockAgentDelete   sync.RWMutex
	lockRepositoryMockAgentGetByID  sync.RWMutex
	lockRepositoryMockAgentUpdate   sync.RWMutex
	lockRepositoryMockAgentsList    sync.RWMutex
	lockRepositoryMockAuthorCreate  sync.RWMutex
	lockRepositoryMockAuthorDelete  sync.RWMutex
	lockRepositoryMockAuthorGetByID sync.RWMutex
	lockRepositoryMockAuthorUpdate  sync.RWMutex
	lockRepositoryMockAuthorsList   sync.RWMutex
	lockRepositoryMockBookCreate    sync.RWMutex
	lockRepositoryMockBookDelete    sync.RWMutex
	lockRepositoryMockBookGetByID   sync.RWMutex
	lockRepositoryMockBookUpdate    sync.RWMutex
	lockRepositoryMockBooksList     sync.RWMutex
)

// Ensure, that RepositoryMock does implement gqlmeetup.Repository.
// If this is not the case, regenerate this file with moq.
var _ gqlmeetup.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of gqlmeetup.Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked gqlmeetup.Repository
//         mockedRepository := &RepositoryMock{
//             AgentCreateFunc: func(ctx context.Context, data gqlmeetup.Agent) (*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentCreate method")
//             },
//             AgentDeleteFunc: func(ctx context.Context, id int64) (*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentDelete method")
//             },
//             AgentGetByIDFunc: func(ctx context.Context, id int64) (*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentGetByID method")
//             },
//             AgentUpdateFunc: func(ctx context.Context, id int64, data gqlmeetup.Agent) (*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentUpdate method")
//             },
//             AgentsListFunc: func(ctx context.Context) ([]*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentsList method")
//             },
//             AuthorCreateFunc: func(ctx context.Context, data gqlmeetup.Author) (*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorCreate method")
//             },
//             AuthorDeleteFunc: func(ctx context.Context, id int64) (*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorDelete method")
//             },
//             AuthorGetByIDFunc: func(ctx context.Context, id int64) (*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorGetByID method")
//             },
//             AuthorUpdateFunc: func(ctx context.Context, id int64, data gqlmeetup.Author) (*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorUpdate method")
//             },
//             AuthorsListFunc: func(ctx context.Context) ([]*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorsList method")
//             },
//             BookCreateFunc: func(ctx context.Context, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error) {
// 	               panic("mock out the BookCreate method")
//             },
//             BookDeleteFunc: func(ctx context.Context, id int64) (*gqlmeetup.Book, error) {
// 	               panic("mock out the BookDelete method")
//             },
//             BookGetByIDFunc: func(ctx context.Context, id int64) (*gqlmeetup.Book, error) {
// 	               panic("mock out the BookGetByID method")
//             },
//             BookUpdateFunc: func(ctx context.Context, id int64, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error) {
// 	               panic("mock out the BookUpdate method")
//             },
//             BooksListFunc: func(ctx context.Context) ([]*gqlmeetup.Book, error) {
// 	               panic("mock out the BooksList method")
//             },
//         }
//
//         // use mockedRepository in code that requires gqlmeetup.Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// AgentCreateFunc mocks the AgentCreate method.
	AgentCreateFunc func(ctx context.Context, data gqlmeetup.Agent) (*gqlmeetup.Agent, error)

	// AgentDeleteFunc mocks the AgentDelete method.
	AgentDeleteFunc func(ctx context.Context, id int64) (*gqlmeetup.Agent, error)

	// AgentGetByIDFunc mocks the AgentGetByID method.
	AgentGetByIDFunc func(ctx context.Context, id int64) (*gqlmeetup.Agent, error)

	// AgentUpdateFunc mocks the AgentUpdate method.
	AgentUpdateFunc func(ctx context.Context, id int64, data gqlmeetup.Agent) (*gqlmeetup.Agent, error)

	// AgentsListFunc mocks the AgentsList method.
	AgentsListFunc func(ctx context.Context) ([]*gqlmeetup.Agent, error)

	// AuthorCreateFunc mocks the AuthorCreate method.
	AuthorCreateFunc func(ctx context.Context, data gqlmeetup.Author) (*gqlmeetup.Author, error)

	// AuthorDeleteFunc mocks the AuthorDelete method.
	AuthorDeleteFunc func(ctx context.Context, id int64) (*gqlmeetup.Author, error)

	// AuthorGetByIDFunc mocks the AuthorGetByID method.
	AuthorGetByIDFunc func(ctx context.Context, id int64) (*gqlmeetup.Author, error)

	// AuthorUpdateFunc mocks the AuthorUpdate method.
	AuthorUpdateFunc func(ctx context.Context, id int64, data gqlmeetup.Author) (*gqlmeetup.Author, error)

	// AuthorsListFunc mocks the AuthorsList method.
	AuthorsListFunc func(ctx context.Context) ([]*gqlmeetup.Author, error)

	// BookCreateFunc mocks the BookCreate method.
	BookCreateFunc func(ctx context.Context, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error)

	// BookDeleteFunc mocks the BookDelete method.
	BookDeleteFunc func(ctx context.Context, id int64) (*gqlmeetup.Book, error)

	// BookGetByIDFunc mocks the BookGetByID method.
	BookGetByIDFunc func(ctx context.Context, id int64) (*gqlmeetup.Book, error)

	// BookUpdateFunc mocks the BookUpdate method.
	BookUpdateFunc func(ctx context.Context, id int64, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error)

	// BooksListFunc mocks the BooksList method.
	BooksListFunc func(ctx context.Context) ([]*gqlmeetup.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// AgentCreate holds details about calls to the AgentCreate method.
		AgentCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data gqlmeetup.Agent
		}
		// AgentDelete holds details about calls to the AgentDelete method.
		AgentDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// AgentGetByID holds details about calls to the AgentGetByID method.
		AgentGetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// AgentUpdate holds details about calls to the AgentUpdate method.
		AgentUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data gqlmeetup.Agent
		}
		// AgentsList holds details about calls to the AgentsList method.
		AgentsList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// AuthorCreate holds details about calls to the AuthorCreate method.
		AuthorCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data gqlmeetup.Author
		}
		// AuthorDelete holds details about calls to the AuthorDelete method.
		AuthorDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// AuthorGetByID holds details about calls to the AuthorGetByID method.
		AuthorGetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// AuthorUpdate holds details about calls to the AuthorUpdate method.
		AuthorUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data gqlmeetup.Author
		}
		// AuthorsList holds details about calls to the AuthorsList method.
		AuthorsList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// BookCreate holds details about calls to the BookCreate method.
		BookCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data gqlmeetup.Book
			// AuthorIDs is the authorIDs argument value.
			AuthorIDs []int64
		}
		// BookDelete holds details about calls to the BookDelete method.
		BookDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// BookGetByID holds details about calls to the BookGetByID method.
		BookGetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// BookUpdate holds details about calls to the BookUpdate method.
		BookUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data gqlmeetup.Book
			// AuthorIDs is the authorIDs argument value.
			AuthorIDs []int64
		}
		// BooksList holds details about calls to the BooksList method.
		BooksList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AgentCreate calls AgentCreateFunc.
func (mock *RepositoryMock) AgentCreate(ctx context.Context, data gqlmeetup.Agent) (*gqlmeetup.Agent, error) {
	if mock.AgentCreateFunc == nil {
		panic("RepositoryMock.AgentCreateFunc: method is nil but Repository.AgentCreate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data gqlmeetup.Agent
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockRepositoryMockAgentCreate.Lock()
	mock.calls.AgentCreate = append(mock.calls.AgentCreate, callInfo)
	lockRepositoryMockAgentCreate.Unlock()
	return mock.AgentCreateFunc(ctx, data)
}

// AgentCreateCalls gets all the calls that were made to AgentCreate.
// Check the length with:
//     len(mockedRepository.AgentCreateCalls())
func (mock *RepositoryMock) AgentCreateCalls() []struct {
	Ctx  context.Context
	Data gqlmeetup.Agent
} {
	var calls []struct {
		Ctx  context.Context
		Data gqlmeetup.Agent
	}
	lockRepositoryMockAgentCreate.RLock()
	calls = mock.calls.AgentCreate
	lockRepositoryMockAgentCreate.RUnlock()
	return calls
}

// AgentDelete calls AgentDeleteFunc.
func (mock *RepositoryMock) AgentDelete(ctx context.Context, id int64) (*gqlmeetup.Agent, error) {
	if mock.AgentDeleteFunc == nil {
		panic("RepositoryMock.AgentDeleteFunc: method is nil but Repository.AgentDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockAgentDelete.Lock()
	mock.calls.AgentDelete = append(mock.calls.AgentDelete, callInfo)
	lockRepositoryMockAgentDelete.Unlock()
	return mock.AgentDeleteFunc(ctx, id)
}

// AgentDeleteCalls gets all the calls that were made to AgentDelete.
// Check the length with:
//     len(mockedRepository.AgentDeleteCalls())
func (mock *RepositoryMock) AgentDeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockAgentDelete.RLock()
	calls = mock.calls.AgentDelete
	lockRepositoryMockAgentDelete.RUnlock()
	return calls
}

// AgentGetByID calls AgentGetByIDFunc.
func (mock *RepositoryMock) AgentGetByID(ctx context.Context, id int64) (*gqlmeetup.Agent, error) {
	if mock.AgentGetByIDFunc == nil {
		panic("RepositoryMock.AgentGetByIDFunc: method is nil but Repository.AgentGetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockAgentGetByID.Lock()
	mock.calls.AgentGetByID = append(mock.calls.AgentGetByID, callInfo)
	lockRepositoryMockAgentGetByID.Unlock()
	return mock.AgentGetByIDFunc(ctx, id)
}

// AgentGetByIDCalls gets all the calls that were made to AgentGetByID.
// Check the length with:
//     len(mockedRepository.AgentGetByIDCalls())
func (mock *RepositoryMock) AgentGetByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockAgentGetByID.RLock()
	calls = mock.calls.AgentGetByID
	lockRepositoryMockAgentGetByID.RUnlock()
	return calls
}

// AgentUpdate calls AgentUpdateFunc.
func (mock *RepositoryMock) AgentUpdate(ctx context.Context, id int64, data gqlmeetup.Agent) (*gqlmeetup.Agent, error) {
	if mock.AgentUpdateFunc == nil {
		panic("RepositoryMock.AgentUpdateFunc: method is nil but Repository.AgentUpdate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data gqlmeetup.Agent
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	lockRepositoryMockAgentUpdate.Lock()
	mock.calls.AgentUpdate = append(mock.calls.AgentUpdate, callInfo)
	lockRepositoryMockAgentUpdate.Unlock()
	return mock.AgentUpdateFunc(ctx, id, data)
}

// AgentUpdateCalls gets all the calls that were made to AgentUpdate.
// Check the length with:
//     len(mockedRepository.AgentUpdateCalls())
func (mock *RepositoryMock) AgentUpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data gqlmeetup.Agent
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data gqlmeetup.Agent
	}
	lockRepositoryMockAgentUpdate.RLock()
	calls = mock.calls.AgentUpdate
	lockRepositoryMockAgentUpdate.RUnlock()
	return calls
}

// AgentsList calls AgentsListFunc.
func (mock *RepositoryMock) AgentsList(ctx context.Context) ([]*gqlmeetup.Agent, error) {
	if mock.AgentsListFunc == nil {
		panic("RepositoryMock.AgentsListFunc: method is nil but Repository.AgentsList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRepositoryMockAgentsList.Lock()
	mock.calls.AgentsList = append(mock.calls.AgentsList, callInfo)
	lockRepositoryMockAgentsList.Unlock()
	return mock.AgentsListFunc(ctx)
}

// AgentsListCalls gets all the calls that were made to AgentsList.
// Check the length with:
//     len(mockedRepository.AgentsListCalls())
func (mock *RepositoryMock) AgentsListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRepositoryMockAgentsList.RLock()
	calls = mock.calls.AgentsList
	lockRepositoryMockAgentsList.RUnlock()
	return calls
}

// AuthorCreate calls AuthorCreateFunc.
func (mock *RepositoryMock) AuthorCreate(ctx context.Context, data gqlmeetup.Author) (*gqlmeetup.Author, error) {
	if mock.AuthorCreateFunc == nil {
		panic("RepositoryMock.AuthorCreateFunc: method is nil but Repository.AuthorCreate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data gqlmeetup.Author
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockRepositoryMockAuthorCreate.Lock()
	mock.calls.AuthorCreate = append(mock.calls.AuthorCreate, callInfo)
	lockRepositoryMockAuthorCreate.Unlock()
	return mock.AuthorCreateFunc(ctx, data)
}

// AuthorCreateCalls gets all the calls that were made to AuthorCreate.
// Check the length with:
//     len(mockedRepository.AuthorCreateCalls())
func (mock *RepositoryMock) AuthorCreateCalls() []struct {
	Ctx  context.Context
	Data gqlmeetup.Author
} {
	var calls []struct {
		Ctx  context.Context
		Data gqlmeetup.Author
	}
	lockRepositoryMockAuthorCreate.RLock()
	calls = mock.calls.AuthorCreate
	lockRepositoryMockAuthorCreate.RUnlock()
	return calls
}

// AuthorDelete calls AuthorDeleteFunc.
func (mock *RepositoryMock) AuthorDelete(ctx context.Context, id int64) (*gqlmeetup.Author, error) {
	if mock.AuthorDeleteFunc == nil {
		panic("RepositoryMock.AuthorDeleteFunc: method is nil but Repository.AuthorDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockAuthorDelete.Lock()
	mock.calls.AuthorDelete = append(mock.calls.AuthorDelete, callInfo)
	lockRepositoryMockAuthorDelete.Unlock()
	return mock.AuthorDeleteFunc(ctx, id)
}

// AuthorDeleteCalls gets all the calls that were made to AuthorDelete.
// Check the length with:
//     len(mockedRepository.AuthorDeleteCalls())
func (mock *RepositoryMock) AuthorDeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockAuthorDelete.RLock()
	calls = mock.calls.AuthorDelete
	lockRepositoryMockAuthorDelete.RUnlock()
	return calls
}

// AuthorGetByID calls AuthorGetByIDFunc.
func (mock *RepositoryMock) AuthorGetByID(ctx context.Context, id int64) (*gqlmeetup.Author, error) {
	if mock.AuthorGetByIDFunc == nil {
		panic("RepositoryMock.AuthorGetByIDFunc: method is nil but Repository.AuthorGetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockAuthorGetByID.Lock()
	mock.calls.AuthorGetByID = append(mock.calls.AuthorGetByID, callInfo)
	lockRepositoryMockAuthorGetByID.Unlock()
	return mock.AuthorGetByIDFunc(ctx, id)
}

// AuthorGetByIDCalls gets all the calls that were made to AuthorGetByID.
// Check the length with:
//     len(mockedRepository.AuthorGetByIDCalls())
func (mock *RepositoryMock) AuthorGetByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockAuthorGetByID.RLock()
	calls = mock.calls.AuthorGetByID
	lockRepositoryMockAuthorGetByID.RUnlock()
	return calls
}

// AuthorUpdate calls AuthorUpdateFunc.
func (mock *RepositoryMock) AuthorUpdate(ctx context.Context, id int64, data gqlmeetup.Author) (*gqlmeetup.Author, error) {
	if mock.AuthorUpdateFunc == nil {
		panic("RepositoryMock.AuthorUpdateFunc: method is nil but Repository.AuthorUpdate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data gqlmeetup.Author
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	lockRepositoryMockAuthorUpdate.Lock()
	mock.calls.AuthorUpdate = append(mock.calls.AuthorUpdate, callInfo)
	lockRepositoryMockAuthorUpdate.Unlock()
	return mock.AuthorUpdateFunc(ctx, id, data)
}

// AuthorUpdateCalls gets all the calls that were made to AuthorUpdate.
// Check the length with:
//     len(mockedRepository.AuthorUpdateCalls())
func (mock *RepositoryMock) AuthorUpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data gqlmeetup.Author
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data gqlmeetup.Author
	}
	lockRepositoryMockAuthorUpdate.RLock()
	calls = mock.calls.AuthorUpdate
	lockRepositoryMockAuthorUpdate.RUnlock()
	return calls
}

// AuthorsList calls AuthorsListFunc.
func (mock *RepositoryMock) AuthorsList(ctx context.Context) ([]*gqlmeetup.Author, error) {
	if mock.AuthorsListFunc == nil {
		panic("RepositoryMock.AuthorsListFunc: method is nil but Repository.AuthorsList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRepositoryMockAuthorsList.Lock()
	mock.calls.AuthorsList = append(mock.calls.AuthorsList, callInfo)
	lockRepositoryMockAuthorsList.Unlock()
	return mock.AuthorsListFunc(ctx)
}

// AuthorsListCalls gets all the calls that were made to AuthorsList.
// Check the length with:
//     len(mockedRepository.AuthorsListCalls())
func (mock *RepositoryMock) AuthorsListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRepositoryMockAuthorsList.RLock()
	calls = mock.calls.AuthorsList
	lockRepositoryMockAuthorsList.RUnlock()
	return calls
}

// BookCreate calls BookCreateFunc.
func (mock *RepositoryMock) BookCreate(ctx context.Context, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error) {
	if mock.BookCreateFunc == nil {
		panic("RepositoryMock.BookCreateFunc: method is nil but Repository.BookCreate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Data      gqlmeetup.Book
		AuthorIDs []int64
	}{
		Ctx:       ctx,
		Data:      data,
		AuthorIDs: authorIDs,
	}
	lockRepositoryMockBookCreate.Lock()
	mock.calls.BookCreate = append(mock.calls.BookCreate, callInfo)
	lockRepositoryMockBookCreate.Unlock()
	return mock.BookCreateFunc(ctx, data, authorIDs)
}

// BookCreateCalls gets all the calls that were made to BookCreate.
// Check the length with:
//     len(mockedRepository.BookCreateCalls())
func (mock *RepositoryMock) BookCreateCalls() []struct {
	Ctx       context.Context
	Data      gqlmeetup.Book
	AuthorIDs []int64
} {
	var calls []struct {
		Ctx       context.Context
		Data      gqlmeetup.Book
		AuthorIDs []int64
	}
	lockRepositoryMockBookCreate.RLock()
	calls = mock.calls.BookCreate
	lockRepositoryMockBookCreate.RUnlock()
	return calls
}

// BookDelete calls BookDeleteFunc.
func (mock *RepositoryMock) BookDelete(ctx context.Context, id int64) (*gqlmeetup.Book, error) {
	if mock.BookDeleteFunc == nil {
		panic("RepositoryMock.BookDeleteFunc: method is nil but Repository.BookDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockBookDelete.Lock()
	mock.calls.BookDelete = append(mock.calls.BookDelete, callInfo)
	lockRepositoryMockBookDelete.Unlock()
	return mock.BookDeleteFunc(ctx, id)
}

// BookDeleteCalls gets all the calls that were made to BookDelete.
// Check the length with:
//     len(mockedRepository.BookDeleteCalls())
func (mock *RepositoryMock) BookDeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockBookDelete.RLock()
	calls = mock.calls.BookDelete
	lockRepositoryMockBookDelete.RUnlock()
	return calls
}

// BookGetByID calls BookGetByIDFunc.
func (mock *RepositoryMock) BookGetByID(ctx context.Context, id int64) (*gqlmeetup.Book, error) {
	if mock.BookGetByIDFunc == nil {
		panic("RepositoryMock.BookGetByIDFunc: method is nil but Repository.BookGetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockBookGetByID.Lock()
	mock.calls.BookGetByID = append(mock.calls.BookGetByID, callInfo)
	lockRepositoryMockBookGetByID.Unlock()
	return mock.BookGetByIDFunc(ctx, id)
}

// BookGetByIDCalls gets all the calls that were made to BookGetByID.
// Check the length with:
//     len(mockedRepository.BookGetByIDCalls())
func (mock *RepositoryMock) BookGetByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockBookGetByID.RLock()
	calls = mock.calls.BookGetByID
	lockRepositoryMockBookGetByID.RUnlock()
	return calls
}

// BookUpdate calls BookUpdateFunc.
func (mock *RepositoryMock) BookUpdate(ctx context.Context, id int64, data gqlmeetup.Book, authorIDs []int64) (*gqlmeetup.Book, error) {
	if mock.BookUpdateFunc == nil {
		panic("RepositoryMock.BookUpdateFunc: method is nil but Repository.BookUpdate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        int64
		Data      gqlmeetup.Book
		AuthorIDs []int64
	}{
		Ctx:       ctx,
		ID:        id,
		Data:      data,
		AuthorIDs: authorIDs,
	}
	lockRepositoryMockBookUpdate.Lock()
	mock.calls.BookUpdate = append(mock.calls.BookUpdate, callInfo)
	lockRepositoryMockBookUpdate.Unlock()
	return mock.BookUpdateFunc(ctx, id, data, authorIDs)
}

// BookUpdateCalls gets all the calls that were made to BookUpdate.
// Check the length with:
//     len(mockedRepository.BookUpdateCalls())
func (mock *RepositoryMock) BookUpdateCalls() []struct {
	Ctx       context.Context
	ID        int64
	Data      gqlmeetup.Book
	AuthorIDs []int64
} {
	var calls []struct {
		Ctx       context.Context
		ID        int64
		Data      gqlmeetup.Book
		AuthorIDs []int64
	}
	lockRepositoryMockBookUpdate.RLock()
	calls = mock.calls.BookUpdate
	lockRepositoryMockBookUpdate.RUnlock()
	return calls
}

// BooksList calls BooksListFunc.
func (mock *RepositoryMock) BooksList(ctx context.Context) ([]*gqlmeetup.Book, error) {
	if mock.BooksListFunc == nil {
		panic("RepositoryMock.BooksListFunc: method is nil but Repository.BooksList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRepositoryMockBooksList.Lock()
	mock.calls.BooksList = append(mock.calls.BooksList, callInfo)
	lockRepositoryMockBooksList.Unlock()
	return mock.BooksListFunc(ctx)
}

// BooksListCalls gets all the calls that were made to BooksList.
// Check the length with:
//     len(mockedRepository.BooksListCalls())
func (mock *RepositoryMock) BooksListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRepositoryMockBooksList.RLock()
	calls = mock.calls.BooksList
	lockRepositoryMockBooksList.RUnlock()
	return calls
}
