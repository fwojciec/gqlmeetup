// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/gqlmeetup"
	"sync"
)

var (
	lockDataLoaderRepositoryMockAuthorsListByAgentIDs sync.RWMutex
)

// Ensure, that DataLoaderRepositoryMock does implement gqlmeetup.DataLoaderRepository.
// If this is not the case, regenerate this file with moq.
var _ gqlmeetup.DataLoaderRepository = &DataLoaderRepositoryMock{}

// DataLoaderRepositoryMock is a mock implementation of gqlmeetup.DataLoaderRepository.
//
//     func TestSomethingThatUsesDataLoaderRepository(t *testing.T) {
//
//         // make and configure a mocked gqlmeetup.DataLoaderRepository
//         mockedDataLoaderRepository := &DataLoaderRepositoryMock{
//             AuthorsListByAgentIDsFunc: func(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorsListByAgentIDs method")
//             },
//         }
//
//         // use mockedDataLoaderRepository in code that requires gqlmeetup.DataLoaderRepository
//         // and then make assertions.
//
//     }
type DataLoaderRepositoryMock struct {
	// AuthorsListByAgentIDsFunc mocks the AuthorsListByAgentIDs method.
	AuthorsListByAgentIDsFunc func(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error)

	// calls tracks calls to the methods.
	calls struct {
		// AuthorsListByAgentIDs holds details about calls to the AuthorsListByAgentIDs method.
		AuthorsListByAgentIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentIDs is the agentIDs argument value.
			AgentIDs []int64
		}
	}
}

// AuthorsListByAgentIDs calls AuthorsListByAgentIDsFunc.
func (mock *DataLoaderRepositoryMock) AuthorsListByAgentIDs(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error) {
	if mock.AuthorsListByAgentIDsFunc == nil {
		panic("DataLoaderRepositoryMock.AuthorsListByAgentIDsFunc: method is nil but DataLoaderRepository.AuthorsListByAgentIDs was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		AgentIDs []int64
	}{
		Ctx:      ctx,
		AgentIDs: agentIDs,
	}
	lockDataLoaderRepositoryMockAuthorsListByAgentIDs.Lock()
	mock.calls.AuthorsListByAgentIDs = append(mock.calls.AuthorsListByAgentIDs, callInfo)
	lockDataLoaderRepositoryMockAuthorsListByAgentIDs.Unlock()
	return mock.AuthorsListByAgentIDsFunc(ctx, agentIDs)
}

// AuthorsListByAgentIDsCalls gets all the calls that were made to AuthorsListByAgentIDs.
// Check the length with:
//     len(mockedDataLoaderRepository.AuthorsListByAgentIDsCalls())
func (mock *DataLoaderRepositoryMock) AuthorsListByAgentIDsCalls() []struct {
	Ctx      context.Context
	AgentIDs []int64
} {
	var calls []struct {
		Ctx      context.Context
		AgentIDs []int64
	}
	lockDataLoaderRepositoryMockAuthorsListByAgentIDs.RLock()
	calls = mock.calls.AuthorsListByAgentIDs
	lockDataLoaderRepositoryMockAuthorsListByAgentIDs.RUnlock()
	return calls
}
