// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/gqlmeetup"
	"sync"
)

var (
	lockDataLoaderRepositoryMockAgentListByIDs       sync.RWMutex
	lockDataLoaderRepositoryMockAuthorListByAgentIDs sync.RWMutex
	lockDataLoaderRepositoryMockAuthorListByBookIDs  sync.RWMutex
	lockDataLoaderRepositoryMockBookListByAuthorIDs  sync.RWMutex
)

// Ensure, that DataLoaderRepositoryMock does implement gqlmeetup.DataLoaderRepository.
// If this is not the case, regenerate this file with moq.
var _ gqlmeetup.DataLoaderRepository = &DataLoaderRepositoryMock{}

// DataLoaderRepositoryMock is a mock implementation of gqlmeetup.DataLoaderRepository.
//
//     func TestSomethingThatUsesDataLoaderRepository(t *testing.T) {
//
//         // make and configure a mocked gqlmeetup.DataLoaderRepository
//         mockedDataLoaderRepository := &DataLoaderRepositoryMock{
//             AgentListByIDsFunc: func(ctx context.Context, ids []int64) ([]*gqlmeetup.Agent, error) {
// 	               panic("mock out the AgentListByIDs method")
//             },
//             AuthorListByAgentIDsFunc: func(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorListByAgentIDs method")
//             },
//             AuthorListByBookIDsFunc: func(ctx context.Context, bookIDs []int64) ([]*gqlmeetup.Author, error) {
// 	               panic("mock out the AuthorListByBookIDs method")
//             },
//             BookListByAuthorIDsFunc: func(ctx context.Context, authorIDs []int64) ([]*gqlmeetup.Book, error) {
// 	               panic("mock out the BookListByAuthorIDs method")
//             },
//         }
//
//         // use mockedDataLoaderRepository in code that requires gqlmeetup.DataLoaderRepository
//         // and then make assertions.
//
//     }
type DataLoaderRepositoryMock struct {
	// AgentListByIDsFunc mocks the AgentListByIDs method.
	AgentListByIDsFunc func(ctx context.Context, ids []int64) ([]*gqlmeetup.Agent, error)

	// AuthorListByAgentIDsFunc mocks the AuthorListByAgentIDs method.
	AuthorListByAgentIDsFunc func(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error)

	// AuthorListByBookIDsFunc mocks the AuthorListByBookIDs method.
	AuthorListByBookIDsFunc func(ctx context.Context, bookIDs []int64) ([]*gqlmeetup.Author, error)

	// BookListByAuthorIDsFunc mocks the BookListByAuthorIDs method.
	BookListByAuthorIDsFunc func(ctx context.Context, authorIDs []int64) ([]*gqlmeetup.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// AgentListByIDs holds details about calls to the AgentListByIDs method.
		AgentListByIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []int64
		}
		// AuthorListByAgentIDs holds details about calls to the AuthorListByAgentIDs method.
		AuthorListByAgentIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentIDs is the agentIDs argument value.
			AgentIDs []int64
		}
		// AuthorListByBookIDs holds details about calls to the AuthorListByBookIDs method.
		AuthorListByBookIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BookIDs is the bookIDs argument value.
			BookIDs []int64
		}
		// BookListByAuthorIDs holds details about calls to the BookListByAuthorIDs method.
		BookListByAuthorIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AuthorIDs is the authorIDs argument value.
			AuthorIDs []int64
		}
	}
}

// AgentListByIDs calls AgentListByIDsFunc.
func (mock *DataLoaderRepositoryMock) AgentListByIDs(ctx context.Context, ids []int64) ([]*gqlmeetup.Agent, error) {
	if mock.AgentListByIDsFunc == nil {
		panic("DataLoaderRepositoryMock.AgentListByIDsFunc: method is nil but DataLoaderRepository.AgentListByIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []int64
	}{
		Ctx: ctx,
		Ids: ids,
	}
	lockDataLoaderRepositoryMockAgentListByIDs.Lock()
	mock.calls.AgentListByIDs = append(mock.calls.AgentListByIDs, callInfo)
	lockDataLoaderRepositoryMockAgentListByIDs.Unlock()
	return mock.AgentListByIDsFunc(ctx, ids)
}

// AgentListByIDsCalls gets all the calls that were made to AgentListByIDs.
// Check the length with:
//     len(mockedDataLoaderRepository.AgentListByIDsCalls())
func (mock *DataLoaderRepositoryMock) AgentListByIDsCalls() []struct {
	Ctx context.Context
	Ids []int64
} {
	var calls []struct {
		Ctx context.Context
		Ids []int64
	}
	lockDataLoaderRepositoryMockAgentListByIDs.RLock()
	calls = mock.calls.AgentListByIDs
	lockDataLoaderRepositoryMockAgentListByIDs.RUnlock()
	return calls
}

// AuthorListByAgentIDs calls AuthorListByAgentIDsFunc.
func (mock *DataLoaderRepositoryMock) AuthorListByAgentIDs(ctx context.Context, agentIDs []int64) ([]*gqlmeetup.Author, error) {
	if mock.AuthorListByAgentIDsFunc == nil {
		panic("DataLoaderRepositoryMock.AuthorListByAgentIDsFunc: method is nil but DataLoaderRepository.AuthorListByAgentIDs was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		AgentIDs []int64
	}{
		Ctx:      ctx,
		AgentIDs: agentIDs,
	}
	lockDataLoaderRepositoryMockAuthorListByAgentIDs.Lock()
	mock.calls.AuthorListByAgentIDs = append(mock.calls.AuthorListByAgentIDs, callInfo)
	lockDataLoaderRepositoryMockAuthorListByAgentIDs.Unlock()
	return mock.AuthorListByAgentIDsFunc(ctx, agentIDs)
}

// AuthorListByAgentIDsCalls gets all the calls that were made to AuthorListByAgentIDs.
// Check the length with:
//     len(mockedDataLoaderRepository.AuthorListByAgentIDsCalls())
func (mock *DataLoaderRepositoryMock) AuthorListByAgentIDsCalls() []struct {
	Ctx      context.Context
	AgentIDs []int64
} {
	var calls []struct {
		Ctx      context.Context
		AgentIDs []int64
	}
	lockDataLoaderRepositoryMockAuthorListByAgentIDs.RLock()
	calls = mock.calls.AuthorListByAgentIDs
	lockDataLoaderRepositoryMockAuthorListByAgentIDs.RUnlock()
	return calls
}

// AuthorListByBookIDs calls AuthorListByBookIDsFunc.
func (mock *DataLoaderRepositoryMock) AuthorListByBookIDs(ctx context.Context, bookIDs []int64) ([]*gqlmeetup.Author, error) {
	if mock.AuthorListByBookIDsFunc == nil {
		panic("DataLoaderRepositoryMock.AuthorListByBookIDsFunc: method is nil but DataLoaderRepository.AuthorListByBookIDs was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BookIDs []int64
	}{
		Ctx:     ctx,
		BookIDs: bookIDs,
	}
	lockDataLoaderRepositoryMockAuthorListByBookIDs.Lock()
	mock.calls.AuthorListByBookIDs = append(mock.calls.AuthorListByBookIDs, callInfo)
	lockDataLoaderRepositoryMockAuthorListByBookIDs.Unlock()
	return mock.AuthorListByBookIDsFunc(ctx, bookIDs)
}

// AuthorListByBookIDsCalls gets all the calls that were made to AuthorListByBookIDs.
// Check the length with:
//     len(mockedDataLoaderRepository.AuthorListByBookIDsCalls())
func (mock *DataLoaderRepositoryMock) AuthorListByBookIDsCalls() []struct {
	Ctx     context.Context
	BookIDs []int64
} {
	var calls []struct {
		Ctx     context.Context
		BookIDs []int64
	}
	lockDataLoaderRepositoryMockAuthorListByBookIDs.RLock()
	calls = mock.calls.AuthorListByBookIDs
	lockDataLoaderRepositoryMockAuthorListByBookIDs.RUnlock()
	return calls
}

// BookListByAuthorIDs calls BookListByAuthorIDsFunc.
func (mock *DataLoaderRepositoryMock) BookListByAuthorIDs(ctx context.Context, authorIDs []int64) ([]*gqlmeetup.Book, error) {
	if mock.BookListByAuthorIDsFunc == nil {
		panic("DataLoaderRepositoryMock.BookListByAuthorIDsFunc: method is nil but DataLoaderRepository.BookListByAuthorIDs was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AuthorIDs []int64
	}{
		Ctx:       ctx,
		AuthorIDs: authorIDs,
	}
	lockDataLoaderRepositoryMockBookListByAuthorIDs.Lock()
	mock.calls.BookListByAuthorIDs = append(mock.calls.BookListByAuthorIDs, callInfo)
	lockDataLoaderRepositoryMockBookListByAuthorIDs.Unlock()
	return mock.BookListByAuthorIDsFunc(ctx, authorIDs)
}

// BookListByAuthorIDsCalls gets all the calls that were made to BookListByAuthorIDs.
// Check the length with:
//     len(mockedDataLoaderRepository.BookListByAuthorIDsCalls())
func (mock *DataLoaderRepositoryMock) BookListByAuthorIDsCalls() []struct {
	Ctx       context.Context
	AuthorIDs []int64
} {
	var calls []struct {
		Ctx       context.Context
		AuthorIDs []int64
	}
	lockDataLoaderRepositoryMockBookListByAuthorIDs.RLock()
	calls = mock.calls.BookListByAuthorIDs
	lockDataLoaderRepositoryMockBookListByAuthorIDs.RUnlock()
	return calls
}
