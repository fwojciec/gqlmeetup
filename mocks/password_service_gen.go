// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/gqlmeetup"
	"sync"
)

var (
	lockPasswordServiceMockCheck sync.RWMutex
	lockPasswordServiceMockHash  sync.RWMutex
)

// Ensure, that PasswordServiceMock does implement gqlmeetup.PasswordService.
// If this is not the case, regenerate this file with moq.
var _ gqlmeetup.PasswordService = &PasswordServiceMock{}

// PasswordServiceMock is a mock implementation of gqlmeetup.PasswordService.
//
//     func TestSomethingThatUsesPasswordService(t *testing.T) {
//
//         // make and configure a mocked gqlmeetup.PasswordService
//         mockedPasswordService := &PasswordServiceMock{
//             CheckFunc: func(pwdHash string, pwd string) error {
// 	               panic("mock out the Check method")
//             },
//             HashFunc: func(pwd string) (string, error) {
// 	               panic("mock out the Hash method")
//             },
//         }
//
//         // use mockedPasswordService in code that requires gqlmeetup.PasswordService
//         // and then make assertions.
//
//     }
type PasswordServiceMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(pwdHash string, pwd string) error

	// HashFunc mocks the Hash method.
	HashFunc func(pwd string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// PwdHash is the pwdHash argument value.
			PwdHash string
			// Pwd is the pwd argument value.
			Pwd string
		}
		// Hash holds details about calls to the Hash method.
		Hash []struct {
			// Pwd is the pwd argument value.
			Pwd string
		}
	}
}

// Check calls CheckFunc.
func (mock *PasswordServiceMock) Check(pwdHash string, pwd string) error {
	if mock.CheckFunc == nil {
		panic("PasswordServiceMock.CheckFunc: method is nil but PasswordService.Check was just called")
	}
	callInfo := struct {
		PwdHash string
		Pwd     string
	}{
		PwdHash: pwdHash,
		Pwd:     pwd,
	}
	lockPasswordServiceMockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	lockPasswordServiceMockCheck.Unlock()
	return mock.CheckFunc(pwdHash, pwd)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//     len(mockedPasswordService.CheckCalls())
func (mock *PasswordServiceMock) CheckCalls() []struct {
	PwdHash string
	Pwd     string
} {
	var calls []struct {
		PwdHash string
		Pwd     string
	}
	lockPasswordServiceMockCheck.RLock()
	calls = mock.calls.Check
	lockPasswordServiceMockCheck.RUnlock()
	return calls
}

// Hash calls HashFunc.
func (mock *PasswordServiceMock) Hash(pwd string) (string, error) {
	if mock.HashFunc == nil {
		panic("PasswordServiceMock.HashFunc: method is nil but PasswordService.Hash was just called")
	}
	callInfo := struct {
		Pwd string
	}{
		Pwd: pwd,
	}
	lockPasswordServiceMockHash.Lock()
	mock.calls.Hash = append(mock.calls.Hash, callInfo)
	lockPasswordServiceMockHash.Unlock()
	return mock.HashFunc(pwd)
}

// HashCalls gets all the calls that were made to Hash.
// Check the length with:
//     len(mockedPasswordService.HashCalls())
func (mock *PasswordServiceMock) HashCalls() []struct {
	Pwd string
} {
	var calls []struct {
		Pwd string
	}
	lockPasswordServiceMockHash.RLock()
	calls = mock.calls.Hash
	lockPasswordServiceMockHash.RUnlock()
	return calls
}
